sort(unique(contriWA$contributor_zip))%>%head(20)
WA_zip_contri=aggregate(data=contriWA,amount~contributor_zip, sum)
#see result
str(WA_zip_contri)
#see result
str(WA_zip_contri)
mapLink="https://github.com/EvansDataScience/data/raw/master/WAzips.json"
library(rgdal)
wazipMap <- rgdal::readOGR(mapLink,stringsAsFactors=F)
plot(wazipMap)
names(wazipMap)
str(wazipMap$ZCTA5CE10)
str(wazipMap$ZCTA5CE10)
# put map first:
layerContrib=merge(wazipMap,WA_zip_contri,
by.x='ZCTA5CE10',
by.y='contributor_zip',
all.x=F) # if no coincidence don't keep shape.
library(rmapshaper)
# This will make just a border of the state
baseMap <- ms_dissolve(wazipMap)
plot(baseMap)
library(RColorBrewer)
library(tmap)
#library(classInt)
varToPLot=layerContrib$amount
numberOfClasses = 5
colorForScale='YlGnBu' # color scale
# color needed:
#colors = brewer.pal(numberOfClasses, colorForScale)
library(tmap)
creditsText="EPSG: 4326\nProj=longlat\ndatum=WGS84"
# our base map first!
base= tm_shape(baseMap) + tm_polygons(col = "black")
# next layer:
layer1= base +  tm_shape(layerContrib) +
tm_polygons("amount",
style="quantile",
n=5,
title="Contributions", # title of legend
palette=colorForScale,border.col = NULL)
fullMap1= layer1 + tm_compass(position = c('left','TOP'),type = 'arrow')
fullMap2= fullMap1+tm_scale_bar(position=c("RIGHT", "BOTTOM"),width =0.2)
fullMap3= fullMap1+tm_credits(creditsText, position=c("left", "bottom"))
fullMap3
fullMap3 +  tm_layout(main.title = "Choropleth",
main.title.position = 'center',
legend.position = c('RIGHT','center'),
#bottom,left,top,right
inner.margins=c(0.1,0,0.1,0.25))
contriWA[,c(9:10)]%>% head()
library(raster)
mapCRS=crs(wazipMap) # projection of our map
# in Lon/LAT
contriWA_geo = SpatialPointsDataFrame(contriWA[,c(10:9)],
contriWA,# the original data frame
proj4string = mapCRS)   # assign a CRS of map
names(contriWA_geo)
names(contriWA_geo)
class(contriWA_geo)
class(contriWA_geo)
tm_shape(baseMap) + tm_polygons()+
#ALPHA 0 is total transparency
tm_shape(contriWA_geo[contriWA_geo$election_year==2010,]) + tm_dots(size = 0.1,col = 'red',alpha=0.1) +
tm_layout(main.title = "Points",main.title.position = 'center') +
tm_compass(position = c('left','TOP'),type = 'arrow')+
tm_scale_bar(position=c("RIGHT", "BOTTOM"),width = 0.2)+
tm_credits(creditsText, position=c("left", "bottom"))
quantile(layerContrib$amount, c(.1,.9))
#filters:
top10=quantile(layerContrib$AVE_Amount, c(.9))
bot10=quantile(layerContrib$AVE_Amount, c(.1))
#newMaps!
mapBot=layerContrib[layerContrib$AVE_Amount<=bot10,]
mapTop=layerContrib[layerContrib$AVE_Amount>=top10,]
legendText="Areas to watch"
shrinkLegend=0.4
title="Top and Botton Average Contribution to elections in WA (2009-2023)"
base= tm_shape(baseMap) + tm_polygons()
layer_1= base +  tm_shape(mapTop) +
tm_polygons(col = 'green',border.col = NULL)
layer_1_2= layer_1 + tm_shape(mapBot) +
tm_polygons(col = 'red',border.col = NULL)
fullMap= layer_1_2 + tm_compass(position = c('left','TOP'),type = 'arrow') +
tm_scale_bar(position=c("RIGHT", "BOTTOM"),width = 0.2)+
tm_credits(creditsText, position=c("left", "bottom"))
fullMap
mapBot
mapTop
layerContrib
plot(mapBot)
#filters:
top10=quantile(layerContrib$amount, c(.9))
bot10=quantile(layerContrib$amount, c(.1))
#newMaps!
mapBot=layerContrib[layerContrib$amount<=bot10,]
mapTop=layerContrib[layerContrib$amount>=top10,]
legendText="Areas to watch"
shrinkLegend=0.4
title="Top and Botton Average Contribution to elections in WA (2009-2023)"
plot(mapBot)
base= tm_shape(baseMap) + tm_polygons()
layer_1= base +  tm_shape(mapTop) +
tm_polygons(col = 'green',border.col = NULL)
layer_1_2= layer_1 + tm_shape(mapBot) +
tm_polygons(col = 'red',border.col = NULL)
fullMap= layer_1_2 + tm_compass(position = c('left','TOP'),type = 'arrow') +
tm_scale_bar(position=c("RIGHT", "BOTTOM"),width = 0.2)+
tm_credits(creditsText, position=c("left", "bottom"))
fullMap
fullMap_leg= fullMap + tm_add_legend(type="fill",
labels=c('good','bad'),
col=c('green','red'),
border.col=NA,
title='to watch')
fullMap_leg
fullMap_leg + tm_layout(main.title = "Highlights",
main.title.position = 'center',
legend.position = c('RIGHT','center'),
#bottom,left,top,right
inner.margins=c(0.1,0,0.1,0.2))
contriWA[,c("contributor_zip","amount","election_year")]
aggregate(data=contriWA[,c("contributor_zip","amount","election_year")],
.~election_year,FUN=mean)
aggregate(data=contriWA[,c("contributor_zip","amount","election_year")],
.~contributor_zip,FUN=mean)
contriWA
aggregate(data=contriWA[,c("contributor_zip","amount","election_year")],
.~contributor_zip+election_year,FUN=mean)
columnToAggregate =contriWA$amount
newROW_UNITS=list(zipCode=contriWA$contributor_zip,
year=contriWA$election_year)
WA_zip_contri_Y=with(contriWA,
aggregate(columnToAggregate,
newROW_UNITS, mean))
names(WA_zip_contri_Y)[3]='AVE_Amount'
View(WA_zip_contri_Y)
WA_zip_contri_Y=aggregate(data=contriWA,
amount~contributor_zip+election_year,FUN=sum)
View(WA_zip_contri_Y)
#see result:
head(WA_zip_contri_Y)
reshape(WA_zip_contri_Y, idvar = "zipCode", timevar = "year", direction = "wide")
WA_zip_contri_Y=reshape(WA_zip_contri_Y, idvar = "contributor_zip", timevar = "election_year", direction = "wide")
#result
head(WA_zip_contri_Y)
library(dplyr)
layerContrib_Y=merge(wazipMap,WA_zip_contri_Y,by.x = "ZCTA5CE10", by.y ="contributor_zip")
grep("amount_", names(layerContrib_Y) ) # ^ means starts with
grep("amount", names(layerContrib_Y) ) # ^ means starts with
# all the questions with this: "H_In_"
positions=grep("amount", names(layerContrib_Y) ) # ^ means starts with
positions
# the 'head' of only those:
sumVars=names(layerContrib_Y[,c(positions)])
sumVars
varsForFacet=aveVars[c(5:9)] # subsetting years
varsForFacet=sumVars[c(5:9)] # subsetting years
tm_shape(layerContrib_Y) +
tm_polygons(varsForFacet,
border.col = NULL,
palette=colorForScale) +
tm_facets(ncol = 3)+
tm_layout(inner.margins=c(0.1,0.3,0.1,0),
main.title = "Highlights",
main.title.position = 'center')
varsForFacet=sumVars[c(9:10)] # subsetting years
tm_shape(layerContrib_Y) +
tm_polygons(varsForFacet,
border.col = NULL,
palette=colorForScale) +
tm_facets(ncol = 3)+
tm_layout(inner.margins=c(0.1,0.3,0.1,0),
main.title = "Highlights",
main.title.position = 'center')
sumVars[c(10)]
varsForFacet=sumVars[c(10)] # subsetting years
tm_shape(layerContrib_Y) +
tm_polygons(varsForFacet,
border.col = NULL,
palette=colorForScale) +
tm_layout(inner.margins=c(0.1,0.3,0.1,0),
main.title = "Highlights",
main.title.position = 'center')
varsForFacet=sumVars[c(9:10)] # subsetting years
tm_shape(layerContrib_Y) +
tm_polygons(varsForFacet,
border.col = NULL,
palette=colorForScale) +
tm_layout(inner.margins=c(0.1,0.3,0.1,0),
main.title = "Highlights",
main.title.position = 'center')
varsForFacet=sumVars[c(9:10)] # subsetting years
tm_shape(layerContrib_Y) +
tm_polygons(varsForFacet,
border.col = NULL,
palette=colorForScale) +
tm_facets(ncol = 2)+
tm_layout(inner.margins=c(0.1,0.3,0.1,0),
main.title = "Highlights",
main.title.position = 'center')
fullMap_leg= fullMap_leg + tm_layout(main.title = "Highlights",
main.title.position = 'center',
legend.position = c('RIGHT','center'),
#bottom,left,top,right
inner.margins=c(0.1,0,0.1,0.2))
fullMap_leg
pointMap= tm_shape(baseMap) + tm_polygons()+
#ALPHA 0 is total transparency
tm_shape(contriWA_geo[contriWA_geo$election_year==2010,]) + tm_dots(size = 0.1,col = 'red',alpha=0.1) +
tm_layout(main.title = "Points",main.title.position = 'center') +
tm_compass(position = c('left','TOP'),type = 'arrow')+
tm_scale_bar(position=c("RIGHT", "BOTTOM"),width = 0.2)+
tm_credits(creditsText, position=c("left", "bottom"))
pointMap
tmap_arrange(pointMap, fullMap_leg)
crs(wazipMap)
crs
crs(wazipMap)="+init=epsg:4326 +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"
crs(wazipMap)
library(raster)
crs(wazipMap)="+init=epsg:4326 +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"
mapCRS=crs(wazipMap) # projection of our map
# in Lon/LAT
contriWA_geo = SpatialPointsDataFrame(contriWA[,c(10:9)],
contriWA,# the original data frame
proj4string = mapCRS)   # assign a CRS of map
library(rgdal)
wazipMap <- rgdal::readOGR(mapLink,stringsAsFactors=F)
wazipMap <- st_set_crs(wazipMap, "+init=epsg:4326 +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0")
plot(wazipMap)
library(rgdal)
#wazipMap <- rgdal::readOGR(mapLink,stringsAsFactors=F)
wazipMap=rgdal::readOGR(mapLink, "OGRGeoJSON")
library(rgdal)
wazipMap <- rgdal::readOGR(mapLink,stringsAsFactors=F)
PROJmap="+init=epsg:4326 +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"
wazipMap <- spTransform(wazipMap, CRS(PROJmap))
library(rgdal)
PROJmap="+init=epsg:4326 +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"
prjMAP= CRS(PROJmap)
wazipMap <- rgdal::readOGR(mapLink,stringsAsFactors=F,p4s = prjMAP)
library(rgdal)
PROJmap="+init=epsg:4326 +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"
prjMAP= CRS(PROJmap)
wazipMap <- rgdal::readOGR(mapLink,stringsAsFactors=F,p4s = PROJmap)
plot(wazipMap)
library(rmapshaper)
# This will make just a border of the state
baseMap <- ms_dissolve(wazipMap)
plot(baseMap)
library(RColorBrewer)
library(tmap)
#library(classInt)
varToPLot=layerContrib$amount
numberOfClasses = 5
colorForScale='YlGnBu' # color scale
# color needed:
#colors = brewer.pal(numberOfClasses, colorForScale)
library(tmap)
creditsText="EPSG: 4326\nProj=longlat\ndatum=WGS84"
# our base map first!
base= tm_shape(baseMap) + tm_polygons(col = "black")
# next layer:
layer1= base +  tm_shape(layerContrib) +
tm_polygons("amount",
style="quantile",
n=5,
title="Contributions", # title of legend
palette=colorForScale,border.col = NULL)
fullMap1= layer1 + tm_compass(position = c('left','TOP'),type = 'arrow')
fullMap2= fullMap1+tm_scale_bar(position=c("RIGHT", "BOTTOM"),width =0.2)
fullMap3= fullMap1+tm_credits(creditsText, position=c("left", "bottom"))
fullMap3
# put map first:
layerContrib=merge(wazipMap,WA_zip_contri,
by.x='ZCTA5CE10',
by.y='contributor_zip',
all.x=F) # if no coincidence don't keep shape.
link='https://github.com/EvansDataScience/data/raw/master/contriWA.RDS'
#getting the data TABLE from the file in the cloud:
contriWA=readRDS(file=url(link))
str(contriWA,width = 60, strict.width = 'cut')
sort(unique(contriWA$election_year))
library(magrittr)
sort(unique(contriWA$contributor_zip))%>%head(20)
WA_zip_contri=aggregate(data=contriWA,amount~contributor_zip, sum)
#see result
str(WA_zip_contri)
mapLink="https://github.com/EvansDataScience/data/raw/master/WAzips.json"
library(rgdal)
PROJmap="+init=epsg:4326 +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"
wazipMap <- rgdal::readOGR(mapLink,stringsAsFactors=F,p4s = PROJmap)
plot(wazipMap)
names(wazipMap)
str(wazipMap$ZCTA5CE10)
# put map first:
layerContrib=merge(wazipMap,WA_zip_contri,
by.x='ZCTA5CE10',
by.y='contributor_zip',
all.x=F) # if no coincidence don't keep shape.
library(rmapshaper)
# This will make just a border of the state
baseMap <- ms_dissolve(wazipMap)
plot(baseMap)
library(RColorBrewer)
library(tmap)
#library(classInt)
varToPLot=layerContrib$amount
numberOfClasses = 5
colorForScale='YlGnBu' # color scale
# color needed:
#colors = brewer.pal(numberOfClasses, colorForScale)
library(tmap)
creditsText="EPSG: 4326\nProj=longlat\ndatum=WGS84"
# our base map first!
base= tm_shape(baseMap) + tm_polygons(col = "black")
# next layer:
layer1= base +  tm_shape(layerContrib) +
tm_polygons("amount",
style="quantile",
n=5,
title="Contributions", # title of legend
palette=colorForScale,border.col = NULL)
fullMap1= layer1 + tm_compass(position = c('left','TOP'),type = 'arrow')
fullMap2= fullMap1+tm_scale_bar(position=c("RIGHT", "BOTTOM"),width =0.2)
fullMap3= fullMap1+tm_credits(creditsText, position=c("left", "bottom"))
fullMap3
fullMap3 +  tm_layout(main.title = "Choropleth",
main.title.position = 'center',
legend.position = c('RIGHT','center'),
#bottom,left,top,right
inner.margins=c(0.1,0,0.1,0.25))
library(raster)
mapCRS=crs(wazipMap) # projection of our map
# in Lon/LAT
contriWA_geo = SpatialPointsDataFrame(contriWA[,c(10:9)],
contriWA,# the original data frame
proj4string = mapCRS)   # assign a CRS of map
names(contriWA_geo)
class(contriWA_geo)
library(tmaptools)
get_proj4(mapCRS)
library(tmaptools)
get_proj4(contriWA_geo)
mapCRS
library(tmaptools)
get_proj4(mapCRS)
pointMap= tm_shape(baseMap) + tm_polygons()+
#ALPHA 0 is total transparency
tm_shape(contriWA_geo[contriWA_geo$election_year==2010,]) + tm_dots(size = 0.1,col = 'red',alpha=0.1) +
tm_layout(main.title = "Points",main.title.position = 'center') +
tm_compass(position = c('left','TOP'),type = 'arrow')+
tm_scale_bar(position=c("RIGHT", "BOTTOM"),width = 0.2)+
tm_credits(creditsText, position=c("left", "bottom"))
pointMap
quantile(layerContrib$amount, c(.1,.9))
#filters:
top10=quantile(layerContrib$amount, c(.9))
bot10=quantile(layerContrib$amount, c(.1))
#newMaps!
mapBot=layerContrib[layerContrib$amount<=bot10,]
mapTop=layerContrib[layerContrib$amount>=top10,]
legendText="Areas to watch"
shrinkLegend=0.4
title="Top and Botton Average Contribution to elections in WA (2009-2023)"
base= tm_shape(baseMap) + tm_polygons()
layer_1= base +  tm_shape(mapTop) +
tm_polygons(col = 'green',border.col = NULL)
layer_1_2= layer_1 + tm_shape(mapBot) +
tm_polygons(col = 'red',border.col = NULL)
fullMap= layer_1_2 + tm_compass(position = c('left','TOP'),type = 'arrow') +
tm_scale_bar(position=c("RIGHT", "BOTTOM"),width = 0.2)+
tm_credits(creditsText, position=c("left", "bottom"))
fullMap
layerContrib
# put map first:
layerContrib=merge(wazipMap,WA_zip_contri,
by.x='ZCTA5CE10',
by.y='contributor_zip') # if no coincidence don't keep shape.
layerContrib
layerContrib
link='https://github.com/EvansDataScience/data/raw/master/contriWA.RData'
#getting the data TABLE from the file in the cloud:
load(file=url(link))
# link to zipped folder
zippedSHP= "https://github.com/EvansDataScience/data/raw/master/WAzips.zip"
library(utils)
temp=tempfile()
download.file(zippedSHP, temp)
unzip(temp)
(maps=list.files(pattern = 'shp'))
# notice the parameters use in the chunk!!
library(rgdal)
wazipMap <- readOGR("SAEP_ZIP_Code_Tabulation_Areas.shp",stringsAsFactors=F)
library(raster)
mapCRS=crs(wazipMap) # projection of our map
contriWA_geo <- SpatialPointsDataFrame(contriWA[,c(10:9)], # Lon/LAT
contriWA,    #the original data frame
proj4string = mapCRS)   # assign a CRS of map
names(contriWA_geo)
class(contriWA_geo)
library(tmaptools)
get_proj4(mapCRS)
plot(wazipMap,border='blue',col='yellow',lwd=0.1)
# NEW LAYER ON TOP
plot(contriWA_geo,
pch=20, #type of character (see link above)
col = "red",
cex = .6, # shrinking
add=T) # VERY important
library(rmapshaper)
# This will make just a border of the state
baseMap <- ms_dissolve(wazipMap)
# similar and saving space:
columnToAggregate=contriWA$amount
# new ROW:
newROW_UNIT=list(zipCode=contriWA$contributor_zip)
WA_zip_contri=with(contriWA,
aggregate(columnToAggregate,
newROW_UNIT,
mean)) #mean per zip code
#see result:
head(WA_zip_contri)
#see result:
head(WA_zip_contri)
names(WA_zip_contri)[2]='AVE_Amount'
names(wazipMap)
str(wazipMap$ZCTA5CE10)
wazipMap$ZCTA5CE10=as.numeric(wazipMap$ZCTA5CE10)
layerContrib=merge(wazipMap,WA_zip_contri, by.x='ZCTA5CE10', by.y='zipCode',all.x=F)
layerContrib
# put map first:
layerContrib=merge(wazipMap,WA_zip_contri,
by.x='ZCTA5CE10',
by.y='contributor_zip',
all.x=F) # if no coincidence don't keep shape.
link='https://github.com/EvansDataScience/data/raw/master/contriWA.RDS'
#getting the data TABLE from the file in the cloud:
contriWA=readRDS(file=url(link))
str(contriWA,width = 60, strict.width = 'cut')
sort(unique(contriWA$election_year))
library(magrittr)
sort(unique(contriWA$contributor_zip))%>%head(20)
WA_zip_contri=aggregate(data=contriWA,amount~contributor_zip, sum)
#see result
str(WA_zip_contri)
mapLink="https://github.com/EvansDataScience/data/raw/master/WAzips.json"
library(rgdal)
PROJmap="+init=epsg:4326 +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"
wazipMap <- rgdal::readOGR(mapLink,stringsAsFactors=F,p4s = PROJmap)
plot(wazipMap)
names(wazipMap)
str(wazipMap$ZCTA5CE10)
# put map first:
layerContrib=merge(wazipMap,WA_zip_contri,
by.x='ZCTA5CE10',
by.y='contributor_zip',
all.x=F) # if no coincidence don't keep shape.
layerContrib
link='https://github.com/EvansDataScience/data/raw/master/contriWA.RDS'
#getting the data TABLE from the file in the cloud:
contriWA=readRDS(file=url(link))
str(contriWA,width = 60, strict.width = 'cut')
sort(unique(contriWA$election_year))
library(magrittr)
sort(unique(contriWA$contributor_zip))%>%head(20)
WA_zip_contri=aggregate(data=contriWA,amount~contributor_zip, sum)
#see result
str(WA_zip_contri)
mapLink="https://github.com/EvansDataScience/data/raw/master/WAzips.json"
library(rgdal)
PROJmap="+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
wazipMap <- rgdal::readOGR(mapLink,stringsAsFactors=F,p4s = PROJmap)
wazipMap
library(rgdal)
PROJmap="+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
wazipMap <- rgdal::readOGR(mapLink,stringsAsFactors=F,p4s = PROJmap)
wazipMap
# notice the parameters use in the chunk!!
library(rgdal)
wazipMap <- readOGR("SAEP_ZIP_Code_Tabulation_Areas.shp",stringsAsFactors=F)
wazipMap
library(rgdal)
PROJmap="+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
wazipMap <- rgdal::readOGR(mapLink,stringsAsFactors=F,p4s = PROJmap)
mapLink="https://github.com/EvansDataScience/data/raw/master/WAzips.json"
library(rgdal)
PROJmap="+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
wazipMap <- rgdal::readOGR(mapLink,stringsAsFactors=F,p4s = PROJmap)
names(wazipMap)
# notice the parameters use in the chunk!!
library(rgdal)
wazipMap <- readOGR("SAEP_ZIP_Code_Tabulation_Areas.shp",stringsAsFactors=F)
names(wazipMap)
head(wazipMap@data)
head(wazipMap@data)
library(rgdal)
PROJmap="+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
wazipMap2 <- rgdal::readOGR(mapLink,stringsAsFactors=F,p4s = PROJmap)
mapLink="https://github.com/EvansDataScience/data/raw/master/WAzips.json"
library(rgdal)
PROJmap="+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
wazipMap2 <- rgdal::readOGR(mapLink,stringsAsFactors=F,p4s = PROJmap)
# notice the parameters use in the chunk!!
library(rgdal)
wazipMap <- readOGR("SAEP_ZIP_Code_Tabulation_Areas.shp",stringsAsFactors=F)
summary(wazipMap)
mapLink="https://github.com/EvansDataScience/data/raw/master/WAzips.json"
library(geojsonio)
map=topojson_read(mapLink)
plot(map)
